library(MASS)
library(fields)
library(plot3D)

# Create grid
n <- 20
x <- seq(0, 1, length.out = n)
y <- seq(0, 1, length.out = n)
grid <- expand.grid(x = x, y = y)

# Compute distance matrix
d <- rdist(grid, grid)

# Exponential covariance
sigma2 <- 1
range <- 0.2
cov_mat <- sigma2 * exp(-d / range)

# Simulate field
set.seed(42)
z <- mvrnorm(1, mu = rep(0, nrow(grid)), Sigma = cov_mat)

# Reshape to matrix
z_mat <- matrix(z, nrow = n)

# Plot with plot3D
persp3D(
  x = x, y = y, z = z_mat,
  colvar = z_mat,
  col = terrain.colors(100),
  theta = 45, phi = 25,
  expand = 0.5,
  shade = 0.6,
  ticktype = "detailed",
  xlab = "X", ylab = "Y", zlab = "Z",
  main = "Static 3D Gaussian Random Field"
)





library(MASS)
library(fields)
library(akima)
library(plot3D)

# Set up coarse grid
n <- 25
x <- seq(0, 1, length.out = n)
y <- seq(0, 1, length.out = n)
grid <- expand.grid(x = x, y = y)

# Distance matrix
d <- rdist(grid, grid)

# Exponential covariance
sigma2 <- 1
range <- 0.2
cov_mat <- sigma2 * exp(-d / range)

# Simulate field
set.seed(123)
z <- mvrnorm(1, mu = rep(0, nrow(grid)), Sigma = cov_mat)

# Interpolate to a fine grid (for smoothness)
interp_result <- interp(
  x = grid$x,
  y = grid$y,
  z = z,
  xo = seq(0, 1, length = 100),
  yo = seq(0, 1, length = 100),
  linear = FALSE
)

persp3D(
  x = interp_result$x,
  y = interp_result$y,
  z = interp_result$z,
  colvar = interp_result$z,
  col = viridis::viridis(100),
  theta = 40, phi = 30,
  expand = 0.5,
  shade = 0.8,
  border = NA,
  colkey = FALSE,
  xlab = expression(s[1]),
  ylab = expression(s[2]),
  zlab = "z",
  main = "Smooth Gaussian Random Field"
)




# First, plot without axis labels
persp3D(
  x = interp_result$x,
  y = interp_result$y,
  z = interp_result$z,
  colvar = interp_result$z,
  col = viridis::viridis(100),
  theta = 40, phi = 30,
  expand = 0.5,
  shade = 0.8,
  border = NA,
  colkey = FALSE,
  xlab = "", ylab = "", zlab = "",
  main = "Smooth Gaussian Random Field"
)

# Then manually add plotmath labels
title(
  xlab = expression(x[1]),
  ylab = expression(x[2]),
  zlab = "Z"
)


